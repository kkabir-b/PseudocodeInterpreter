statements : NEWLINE* expr (NEWLINE+ expr)* NEWLINE


expr       :
           : IDENTIFIER EQ expr
           : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr  : NOT comp-expr
           : arith-expr ((EE|LT|LTE|GT|GTE|NE) arith-expr)*

arith-expr :
           : term ((Plus|Minus) term)*

term       : factor((Mul|Div) factor)*

factor     : (Plus|Minus) factor
           : power

power      : call (Power factor)*

call       : atom (expr (IDENTIFIER (COMMA expr)*)? RPAREN)?

atom       : Int|Real|String|Identifier
           : LParen expr RParen
           :list-expr
           :if-expr
           :for-expr
           :while-expr
           :func-def

if-expr    : KEYWORD: IF expr
             NEWLINE KEYWORD:THEN NEWLINE
             statements
             (else-expr)?
             KEYWORD:ENDIF Newline|Eof

else-expr  : KEYWORD:ELSE
             statements

case-expr  : KEYWORD: CASE KEYWORD: OF expr
             (NEWLINE expr ARROW expr)*
             NEWLINE KEYWORD:ENDCASE NEWLINE|EOF

for-expr  : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
             (KEYWORD:STEP expr)? NEWLINE
             statements
             KEYWORD:NEXT IDENTIFIER Newline|Eof

while-expr: KEYWORD:WHILE expr NEWLINE KEYWORD:DO NEWLINE
            statements
            KEYWORD:ENDWHILE Newline|Eof

repeat-expr: KEYWORK:REPEAT expr NEWLINE
             statements
             KEYWORD:UNTIL expr Newline|Eof

func-def   : KEYWORD:FUNCTION IDENTIFIER
             LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN KEYWORD:RETURNS datatype NEWLINE
             statements
             KEYWORD:RETURN expr NEWLINE
             KEYWORD:ENDFUNCTION NEWLINE|Eof

procedure-def :KEYWORD:PROCEDURE IDENTIFIER
             LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN KEYWORD:RETURNS datatype NEWLINE
             statements
             KEYWORD:ENDPROCEDURE NEWLINE|Eof

list-expr: LSQUAREBRACKET (expr (IDENTIFIER (COMMA expr)*) RSQUAREBRACKET
